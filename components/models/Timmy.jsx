/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";

export default function Timmy({ action, position, rotation }) {
  const group = useRef();
  const { nodes, materials, animations } = useGLTF("/Character/Timmy.glb");
  const { actions } = useAnimations(animations, group);
  const previousAction = usePrevious(action);

  useEffect(() => {
    // console.log(actions);
    if (previousAction) {
      actions[previousAction].fadeOut(0.2);
      actions[previousAction].stop();
    }
    actions[action].play();
    actions[action].fadeIn(0.2);
  }, [action, actions, previousAction]);

  return (
    <group ref={group} position={position} dispose={null}>
      <group>
        <group rotation={rotation} scale={0.018}>
          <primitive object={nodes.mixamorig6Hips} />
          <skinnedMesh
            geometry={nodes.Ch09.geometry}
            material={materials.Ch09_body}
            skeleton={nodes.Ch09.skeleton}
          />
        </group>
      </group>
    </group>
  );
}

useGLTF.preload("/Character/Timmy.glb");

function usePrevious(value) {
  // The ref object is a generic container whose current property is mutable ...
  // ... and can hold any value, similar to an instance property on a class
  const ref = useRef();
  // Store current value in ref
  useEffect(() => {
    ref.current = value;
  }, [value]); // Only re-run if value changes
  // Return previous value (happens before update in useEffect above)
  return ref.current;
}
